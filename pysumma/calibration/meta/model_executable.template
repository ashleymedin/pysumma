#!$pythonPath
import pysumma as ps
import pysumma.evaluation as pse
import shutil
import xarray as xr
$importStrings

if __name__ == '__main__':
    # Template variables
    summa_exe = '$summaExe'
    file_manager = '$fileManager'
    obs_data_file = '$obsDataFile'
    sim_calib_var = '$simVarName'
    obs_calib_var = '$obsVarName'
    out_file = '$outFile'
    param_mapping_file = '$paramMappingFile'
    param_weight_file = '$paramWeightFile'
    param_file = '$paramFile'
    simulation_args = $simulationArgs
    conversion = $conversionFunc
    filter = $filterFunc

    # read in parameters from ostrich files and summa setup
    with xr.open_dataset(param_file) as temp:
        trial_params = temp.load()

    param_dict = {}
    with open(param_weight_file) as weights:
        for line in weights:
            name, value = line.split('|')
            param_dict[name.strip()] = float(value.strip())

    # insert calibration parameters from ostrich
    for k, v in param_dict.items():
        trial_params[k] = xr.full_like(trial_params['hruIndex'], fill_value=v)
    trial_params.to_netcdf(param_file)

    # initialize simulation object
    s = ps.Simulation(summa_exe, file_manager, **simulation_args)

    # run the simulation
    s.run('local')
    if s.status != 'Success':
        print(s.stdout)
        print('--------------------------------------------')
        print(s.stderr)
    assert s.status == 'Success'

    # open output and calculate diagnostics
    sim_ds = s.output
    obs_ds = xr.open_dataset(obs_data_file)

    # trim sim and obs to common time length
    time_slice = pse.trim_time(sim_ds, obs_ds)
    sim_ds = sim_ds.sel(time=time_slice)
    obs_ds = obs_ds.sel(time=time_slice)

    kge = pse.kling_gupta_efficiency( filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))
    mae = pse.mean_absolute_error(    filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))
    rmse = pse.root_mean_square_error(filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))

    # save diagnostics in form that ostrich can read
    with open(out_file, 'w+') as f:
        f.write('%.6f'%kge  + '\t #KGE\n')
        f.write('%.6f'%mae  + '\t #MAE\n')
        f.write('%.6f'%rmse + '\t #RMSE\n')
